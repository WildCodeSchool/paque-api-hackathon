{
    "swagger": "2.0",
    "info": {
      "descriptiond": "These HTTP endpoints, allow you to explore the Easter universe...\n ",
      "description": "This API offer to you many possibilities :\n ## Easter Universe (HTTP)\nThese HTTP endpoints, allow you to explore the Easter universe :\n- GET `/api/eggs`\n- GET `/api/eggs/:id`\n- GET `/api/eggs/random`\n- GET `/api/characters`\n- GET `/api/characters/:id`\n- GET `/api/characters/random`\n ## Easter Stock Market (HTTP)\nThese HTTP endpoints, help you to track share prices **history** of both chocolate, milk and egg !\n- GET `/api/stocks/chocolates?min={timestamp}&interval={number}`\n- GET `/api/stocks/eggs?min={timestamp}&interval={number}`\n- GET `/api/stocks/milks?min={timestamp}&interval={number}`\n## Easter Stock Market (WebSocket)\nThese **WebSocket** endpoints, help you to track share prices **in real time** of both chocolate, milk and egg !\n- `/api/stocks/chocolates`\n- `/api/stocks/eggs`\n- `/api/stocks/milks`\n\n#### You can't test these Web Socket endpoint with this web interface, you need test them directly in your application.",
      "version": "1.0.0",
      "title": "Easter API"
    },
    "host": "51.68.18.107",
    "basePath": "/api",
    "tags": [
      {
        "name": "eggs",
        "description": "Everything about your easter egg"
      },
      {
        "name": "characters",
        "description": "Everything about easter characters... or not !"
      },
      {
        "name": "stocks",
        "description": "Everything about share prices history of both chocolate, milk and egg"
      }
    ],
    "schemes": [
      "http"
    ],
    "paths": {
      "/eggs": {
        "get": {
          "tags": [
            "eggs"
          ],
          "summary": "Get all easter eggs",
          "description": "",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json",
            "application/xml"
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Egg"
              }
            }
          }
        }
      },
      "/eggs/{id}": {
        "get": {
          "tags": [
            "eggs"
          ],
          "summary": "Get egg by his id",
          "description": "",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of egg to return",
              "required": true,
              "type": "string",
              "format": "uid"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Egg"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Egg not found"
            }
          }
        }
      },
      "/eggs/random": {
        "get": {
          "tags": [
            "eggs"
          ],
          "summary": "Get random egg",
          "description": "",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Egg"
              }
            }
          }
        }
      },
      "/characters": {
        "get": {
          "tags": [
            "characters"
          ],
          "summary": "Get all easter characters",
          "description": "",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Character"
              }
            }
          }
        }
      },
      "/characters/{id}": {
        "get": {
          "tags": [
            "characters"
          ],
          "summary": "Get character by his id",
          "description": "",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of character to return",
              "required": true,
              "type": "string",
              "format": "uid"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Character"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Characters not found"
            }
          }
        }
      },
      "/characters/random": {
        "get": {
          "tags": [
            "characters"
          ],
          "summary": "Get random character",
          "description": "",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Character"
              }
            }
          }
        }
      },
      "/stocks/chocolates": {
        "get": {
          "tags": [
            "stocks"
          ],
          "summary": "Get share price history of chocolate",
          "description": "",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "min",
              "in": "query",
              "description": "An integer representing a timestamp on 13 digits (milliseconds must be set)",
              "required": true,
              "type": "integer"
            },
            {
              "name": "interval",
              "in": "query",
              "description": "An interval in milliseconds between each date",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Stock"
              }
            }
          }
        }
      },
      "/stocks/eggs": {
        "get": {
          "tags": [
            "stocks"
          ],
          "summary": "Get share price history of eggs",
          "description": "",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "min",
              "in": "query",
              "description": "An integer representing a timestamp on 13 digits (milliseconds must be set)",
              "required": true,
              "type": "integer"
            },
            {
              "name": "interval",
              "in": "query",
              "description": "An interval in milliseconds between each date",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Stock"
              }
            }
          }
        }
      },
      "/stocks/milks": {
        "get": {
          "tags": [
            "stocks"
          ],
          "summary": "Get share price history of milks",
          "description": "",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "min",
              "in": "query",
              "description": "An integer representing a timestamp on 13 digits (milliseconds must be set)",
              "required": true,
              "type": "integer"
            },
            {
              "name": "interval",
              "in": "query",
              "description": "An interval in milliseconds between each date",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Stock"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "Egg": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Egg ID (ObjectId)",
            "format": "uid"
          },
          "name": {
            "type": "string",
            "description": "Egg name"
          },
          "color": {
            "type": "string",
            "description": "Egg color in hexadecimal format"
          },
          "caliber": {
            "type": "string",
            "description": "Egg caliber. Possible values are : XS, S, M, L, XL, 2XL, 3XL"
          },
          "farming": {
            "type": "integer",
            "description": "Egg farming. Possible values are : 0 for bio, 1 for raised outdoors, 2 for raised on the ground, 3 for raise in caged"
          },
          "country": {
            "type": "string",
            "description": "Egg country origin, on two characters ex : FR, EN..."
          },
          "validity": {
            "type": "string",
            "format": "date-time",
            "description": "Egg date validity. Eg : 2019-04-09T19:27:18.927Z"
          },
          "rarity": {
            "type": "string",
            "description": "Egg rarity. Possible values are : 'junk', 'basic', 'fine', 'masterwork', 'rare', 'exotic', 'ascended', 'legendary'"
          },
          "image": {
            "type": "string",
            "format": "uri",
            "description": "Egg image URL"
          },
          "power": {
            "type": "string",
            "description": "Egg power. Possible values are : increase/decrease physical power, magical power, attack speed, physical proctection, magical proctection, movement speed, health"
          }
        }
      },
      "Character": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Character ID (ObjectId)",
            "format": "uid"
          },
          "name": {
            "type": "string",
            "description": "Character name"
          },
          "gender": {
            "type": "string",
            "description": "Character gender"
          },
          "origin": {
            "type": "string",
            "description": "Character origin, can be a planet, a city etc."
          },
          "image": {
            "type": "string",
            "format": "uri",
            "description": "Character image URL"
          },
          "skills": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Character skills. Possible values are : hight speed, dexterity, fly, Xray vision, invisibility, magnetic control, hight strength, pass through walls, resurrection, mental control"
            }
          }
        }
      },
      "Stock": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date of emited value"
          },
          "price": {
            "type": "number",
            "format": "double",
            "description": "Price"
          },
          "amount": {
            "type": "integer",
            "description": "Quantity for the price"
          },
          "unit": {
            "type": "string",
            "description": "Quantity unit. Possible value are : 'l' or 'g'"
          },
          "trend": {
            "type": "string",
            "description": "Stock market trend. POssible value are: 'down', 'flat', 'up'"
          },
          "trades": {
            "type": "integer",
            "description": "Number of trades at time T"
          }
        }
      }
    },
    "externalDocs": {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io"
    }
  }
